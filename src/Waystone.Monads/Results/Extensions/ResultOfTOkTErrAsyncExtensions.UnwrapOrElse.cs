namespace Waystone.Monads.Results.Extensions;

using System;
using System.Threading.Tasks;

public static partial class ResultOfTOkTErrAsyncExtensions
{
    /// <summary>
    /// Asynchronously unwraps the result, returning the inner value if the
    /// result is Ok, or evaluating a function to produce a value if the result is Err.
    /// </summary>
    /// <param name="result">
    /// The result instance that contains either a success value
    /// (Ok) or an error value (Err).
    /// </param>
    /// <param name="else">
    /// The function to invoke to produce an alternative value if
    /// the result is Err.
    /// </param>
    /// <typeparam name="TOk">The type of the value contained in the Ok state.</typeparam>
    /// <typeparam name="TErr">The type of the error contained in the Err state.</typeparam>
    /// <returns>
    /// A task that produces either the unwrapped Ok value or the alternative
    /// value generated by the provided function.
    /// </returns>
    public static Task<TOk> UnwrapOrElseAsync<TOk, TErr>(
        this Result<TOk, TErr> result,
        Func<TErr, Task<TOk>> @else)
        where TOk : notnull where TErr : notnull =>
        result.Match(Task.FromResult, @else);

    /// <summary>
    /// Asynchronously unwraps the result, returning the inner value if the
    /// result is Ok, or invoking a function to produce an alternative value if the
    /// result is Err.
    /// </summary>
    /// <param name="result">
    /// The result instance that contains either a success value
    /// (Ok) or an error value (Err).
    /// </param>
    /// <param name="else">
    /// The asynchronous function to invoke to produce an
    /// alternative value if the result is Err.
    /// </param>
    /// <typeparam name="TOk">The type of the value contained in the Ok state.</typeparam>
    /// <typeparam name="TErr">The type of the error contained in the Err state.</typeparam>
    /// <returns>
    /// A value task that produces either the unwrapped Ok value or the
    /// alternative value generated by the provided function.
    /// </returns>
    public static ValueTask<TOk> UnwrapOrElseAsync<TOk, TErr>(
        this Result<TOk, TErr> result,
        Func<TErr, ValueTask<TOk>> @else)
        where TOk : notnull where TErr : notnull =>
        result.Match(value => new ValueTask<TOk>(value), @else);

    /// <summary>
    /// Asynchronously unwraps the result, returning the inner value if the
    /// result is Ok, or evaluating a function to produce a value if the result is Err.
    /// </summary>
    /// <param name="resultTask">
    /// The result instance that contains either a success
    /// value (Ok) or an error value (Err).
    /// </param>
    /// <param name="else">
    /// The function to invoke to produce an alternative value if
    /// the result is Err. This function returns a Task of the alternative value.
    /// </param>
    /// <typeparam name="TOk">The type of the value contained in the Ok state.</typeparam>
    /// <typeparam name="TErr">The type of the error contained in the Err state.</typeparam>
    /// <returns>
    /// A task that produces either the unwrapped Ok value or the alternative
    /// value generated by the provided function.
    /// </returns>
    public static Task<TOk> UnwrapOrElseAsync<TOk, TErr>(
        this Task<Result<TOk, TErr>> resultTask,
        Func<TErr, Task<TOk>> @else)
        where TOk : notnull where TErr : notnull =>
        resultTask.MatchAsync(Task.FromResult, @else);

    /// <summary>
    /// Asynchronously unwraps the result, returning the inner value if the
    /// result is Ok, or evaluating a function to produce a value if the result is Err.
    /// </summary>
    /// <param name="resultTask">
    /// The result instance that contains either a success
    /// value (Ok) or an error value (Err).
    /// </param>
    /// <param name="else">
    /// The function to invoke asynchronously to produce an
    /// alternative value if the result is Err.
    /// </param>
    /// <typeparam name="TOk">The type of the value contained in the Ok state.</typeparam>
    /// <typeparam name="TErr">The type of the error contained in the Err state.</typeparam>
    /// <returns>
    /// A value task that produces either the unwrapped Ok value or the
    /// alternative value generated by the provided function.
    /// </returns>
    public static ValueTask<TOk> UnwrapOrElseAsync<TOk, TErr>(
        this ValueTask<Result<TOk, TErr>> resultTask,
        Func<TErr, ValueTask<TOk>> @else)
        where TOk : notnull where TErr : notnull =>
        resultTask.MatchAsync(value => new ValueTask<TOk>(value), @else);
}
