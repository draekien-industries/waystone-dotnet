// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace Waystone.Monads.Iterators
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class IterFeature : object, Xunit.IClassFixture<IterFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Iterators", "Iter", null, global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Iter.feature"
#line hidden
        
        public IterFeature(IterFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            try
            {
                await this.TestInitializeAsync();
            }
            catch (System.Exception e1)
            {
                try
                {
                    ((Xunit.IAsyncLifetime)(this)).DisposeAsync();
                }
                catch (System.Exception e2)
                {
                    throw new System.AggregateException("Test initialization failed", e1, e2);
                }
                throw;
            }
        }
        
        async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Converting an enumerable to an iterator")]
        [Xunit.TraitAttribute("FeatureTitle", "Iter")]
        [Xunit.TraitAttribute("Description", "Converting an enumerable to an iterator")]
        public async global::System.Threading.Tasks.Task ConvertingAnEnumerableToAnIterator()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Converting an enumerable to an iterator", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 3
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
        await testRunner.GivenAsync("an \"enumerable\" of integers from 1 to 5", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 5
        await testRunner.WhenAsync("converting \"enumerable\" of integers to an iterator", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
                global::Reqnroll.Table table6 = new global::Reqnroll.Table(new string[] {
                            "Value"});
                table6.AddRow(new string[] {
                            "1"});
                table6.AddRow(new string[] {
                            "2"});
                table6.AddRow(new string[] {
                            "3"});
                table6.AddRow(new string[] {
                            "4"});
                table6.AddRow(new string[] {
                            "5"});
#line 6
        await testRunner.ThenAsync("the \"enumerable\" iterator of integers should yield", ((string)(null)), table6, "Then ");
#line hidden
#line 13
        await testRunner.AndAsync("the size hint of the \"enumerable\" iterator should have a lower bound of 5", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 14
        await testRunner.AndAsync("the size hint of the \"enumerable\" iterator should have an upper bound of 5", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Size hint of an iterator")]
        [Xunit.TraitAttribute("FeatureTitle", "Iter")]
        [Xunit.TraitAttribute("Description", "Size hint of an iterator")]
        public async global::System.Threading.Tasks.Task SizeHintOfAnIterator()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Size hint of an iterator", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 16
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 17
        await testRunner.GivenAsync("an \"enumerable\" of integers from 1 to 5", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 18
        await testRunner.WhenAsync("converting \"enumerable\" of integers to an iterator", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 19
        await testRunner.ThenAsync("the size hint of the \"enumerable\" iterator should have a lower bound of 5", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 20
        await testRunner.AndAsync("the size hint of the \"enumerable\" iterator should have an upper bound of 5", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 22
        await testRunner.WhenAsync("invoking Next on \"enumerable\" iterator", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 23
        await testRunner.ThenAsync("the size hint of the \"enumerable\" iterator should have a lower bound of 4", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 24
        await testRunner.AndAsync("the size hint of the \"enumerable\" iterator should have an upper bound of 4", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 26
        await testRunner.WhenAsync("invoking Next on \"enumerable\" iterator", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 27
        await testRunner.ThenAsync("the size hint of the \"enumerable\" iterator should have a lower bound of 3", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 28
        await testRunner.AndAsync("the size hint of the \"enumerable\" iterator should have an upper bound of 3", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 30
        await testRunner.WhenAsync("invoking Next on \"enumerable\" iterator", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 31
        await testRunner.ThenAsync("the size hint of the \"enumerable\" iterator should have a lower bound of 2", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 32
        await testRunner.AndAsync("the size hint of the \"enumerable\" iterator should have an upper bound of 2", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 34
        await testRunner.WhenAsync("invoking Next on \"enumerable\" iterator", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 35
        await testRunner.ThenAsync("the size hint of the \"enumerable\" iterator should have a lower bound of 1", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 36
        await testRunner.AndAsync("the size hint of the \"enumerable\" iterator should have an upper bound of 1", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 38
        await testRunner.WhenAsync("invoking Next on \"enumerable\" iterator", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 39
        await testRunner.ThenAsync("the size hint of the \"enumerable\" iterator should have a lower bound of 0", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 40
        await testRunner.AndAsync("the size hint of the \"enumerable\" iterator should have an upper bound of None", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Equality of iterators")]
        [Xunit.TraitAttribute("FeatureTitle", "Iter")]
        [Xunit.TraitAttribute("Description", "Equality of iterators")]
        public async global::System.Threading.Tasks.Task EqualityOfIterators()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Equality of iterators", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 42
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 43
        await testRunner.GivenAsync("an \"enumerable-a\" of integers from 1 to 5", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 44
        await testRunner.AndAsync("an \"enumerable-b\" of integers from 1 to 5", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 45
        await testRunner.WhenAsync("converting \"enumerable-a\" of integers to an iterator", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 46
        await testRunner.AndAsync("converting \"enumerable-b\" of integers to an iterator", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 47
        await testRunner.ThenAsync("the \"enumerable-a\" iterator of integers should be equal to \"enumerable-b\" iterato" +
                        "r of integers", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Equality of enumerables")]
        [Xunit.TraitAttribute("FeatureTitle", "Iter")]
        [Xunit.TraitAttribute("Description", "Equality of enumerables")]
        public async global::System.Threading.Tasks.Task EqualityOfEnumerables()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Equality of enumerables", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 49
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 50
        await testRunner.GivenAsync("an \"enumerable-a\" of integers from 1 to 5", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 51
        await testRunner.AndAsync("an \"enumerable-b\" of integers from 1 to 5", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 52
        await testRunner.ThenAsync("the \"enumerable-a\" enumerable of integers should be equal to \"enumerable-b\" enume" +
                        "rable of integers", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Inequality of iterators")]
        [Xunit.TraitAttribute("FeatureTitle", "Iter")]
        [Xunit.TraitAttribute("Description", "Inequality of iterators")]
        public async global::System.Threading.Tasks.Task InequalityOfIterators()
        {
            string[] tagsOfScenario = ((string[])(null));
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Inequality of iterators", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 54
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 55
        await testRunner.GivenAsync("an \"enumerable-a\" of integers from 1 to 5", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 56
        await testRunner.AndAsync("an \"enumerable-b\" of integers from 6 to 10", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 57
        await testRunner.WhenAsync("converting \"enumerable-a\" of integers to an iterator", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 58
        await testRunner.AndAsync("converting \"enumerable-b\" of integers to an iterator", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 59
        await testRunner.ThenAsync("the \"enumerable-a\" iterator of integers should not be equal to \"enumerable-b\" ite" +
                        "rator of integers", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 61
        await testRunner.GivenAsync("an \"enumerable-a\" of chars from \"a\" to \"e\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 62
        await testRunner.AndAsync("an \"enumerable-b\" of integers from 1 to 5", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 63
        await testRunner.WhenAsync("converting \"enumerable-a\" of chars to an iterator", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 64
        await testRunner.AndAsync("converting \"enumerable-b\" of integers to an iterator", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 65
        await testRunner.ThenAsync("the \"enumerable-a\" iterator of chars should not be equal to \"enumerable-b\" iterat" +
                        "or of integers", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await IterFeature.FeatureSetupAsync();
            }
            
            async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await IterFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
